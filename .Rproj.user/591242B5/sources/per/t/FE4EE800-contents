---
title: "Paper: Trading Liberties in Times of Crisis."
author:
 - Heike Klüver, Humboldt
 - Felix Hartmann, Humboldt
 - Macartan Humphreys, WZB and Columbia
 - Ferdinand Geißler, Humboldt
 - Johannes Giesecke, Humboldt
date: "October 2021"
output:
  html_document:
    number_sections: yes
    toc: yes
    toc_float: yes
    toc_depth: 3
    self_contained: yes
    code_folding: hide
  pdf_document:
    toc: yes
  word_document:
    toc: yes
    toc_depth: '2'
keywords: vaccine hesitancy, covid, transaction costs
theme: null
abstract: 
  chunk_output_type: console
---


# Housekeeping

## Options

```{r setup, echo=TRUE}
library("haven")
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, comment=NA)
options(qwraps2_markup = "markdown")

## Packages
if (!require(pacman)) install.packages("pacman")

pacman::p_load(
  lfe,        # 
  pid,
  ggpubr,     # plot arrange
  gridExtra,
  modelsummary,
  ggridges,    # plot
  cregg,       # conjoint
  readxl,      # read excel
  gtrendsR,    # google trends
  aod,         # hypothesis testing (1.3.1)
  broom.helpers,# tidy regression
  gtsummary,
  car,         # linear hypothesis testing for causal tree (3.0-2)
  corrplot,    # Correlations (0.84)
  DeclareDesign, 
  dplyr,       # Data manipulation (0.8.0.1)
  evtree,      # evolutionary learning of globally optimal trees (1.0-7)
  fastDummies,
  fBasics,     # Summary statistics (3042.89)
  ggplot2,
  ggforce,     # plot  
  grf,         # Generalized random forests (0.10.2)
  haven,       # load sav
  kableExtra,  # Prettier RMarkdown (1.0.1)
  knitr,
  labelled,
  psych,       # Correlation p-values (1.8.12)
  purrr,
  rpart,       # Classification and regression trees, or CART (4.1-13)
  reshape2,
  rpart.plot,  # Plotting trees (3.0.6)
  readr,       # Reading csv files (1.3.1)
  sjlabelled,
  stats,
  summarytools,
  texreg,
  tidyverse,
  tidyselect,
  tidyr,       # Database operations (0.8.3)
  tidycat,     # tidy with categorical variables
  tidymodels,
  treeClust,   # Predicting leaf position for causal trees (1.1-7)
  tibble)      # Modern alternative to data frames (2.1.1)

rm(list=ls())
options(modelsummary_format_numeric_latex = "mathmode")
# setwd("/Users/fh/Dropbox/Personal Folders/HU/Covid Vaccine Allocation/5_writing/Paper 5 Freedoms/1_analysis")

# Set seed for reproducibility
set.seed(201911) 

# helper function to get lm_robust with reference category
tidy_coefs_with_ref <- function(mod_obj, sep = "(?=[A-Z])"){

  tidy_coefs <- tidy(mod_obj) %>% 
    separate(term, c("variable", "level"), sep, remove = FALSE) %>% 
    mutate(variable = paste0(variable))

  xlevels <- mod_obj$xlevels  

  missing_levels <- xlevels %>% 
    enframe() %>% 
    unnest() %>% 
    set_names(c("variable", "level"))

  missing_levels %>% 
    anti_join(tidy_coefs) %>% 
    bind_rows(tidy_coefs) %>% 
    arrange(variable, level)
}

# Third Wave: to get the covariates 

# data from the 9th of September

#fourthwave <- "../../../4_data/wave_4/D-P21-13185 HU Berlin Impfskeptiker_Welle 4_Finaler_Datensatz---Combined"
fourthwave <- "../../../4_data/wave_4/D-P21-13185 HU Berlin Impfskeptiker_W4_inkl Device---Combined"

merged <- "../../../4_data/Merge/Merged_W1_W2_W3_W4.rds"

vignettepath <- "../../../4_data/wave_4/W4_exp7_vignettes_universe_-_20210831.dta"

# variable names and labels
var_list <-  read_excel("1_input/vars.xls") %>% arrange(order)

outcomes <- c("rating","outcome","trust","vaccination_probability")
outcome_labels <- c("Rating","Policy Support", "Trust", "Vaccination Probability")
treatments <- c("severity", "stringency","universal")
treatment_labels <- c("Severity of pandemic", "Severity of restriction","Universality of restrictions")
conditions_labels <- c("Moderate worsening", "Sharp worsening", "Dramatic worsening")
policy_severity_labels <- c("Light", "Moderate", "Stringent")
policy_universal_labels <- c("Exclude\nvaccinated + tested", "Exclude\nvaccinated", "Universal\n(No exceptions)")

statuses <- c("Acceptant", "Refusing", "Undecided")

# Training fraction
train_fraction <- 1  # for causal forests: currently all data used

```

```{r }

# some basic varibles (education) have many NA, probably have to use data from first round 
covariate_names <- var_list$new_name[var_list$covariate==1]

```



## Data Prep

```{r}

severity_codes <- c("Eine Verschlechterung der Situation (7-Tage-Inzidenz von 150 und eine Belegung der Intensivbetten von 80 %)" =-1,
"Eine starke Verschlechterung der Situation (7-Tage-Inzidenz von 300 und eine Belegung der Intensivbetten von 90 %)"=0,
"Eine dramatische Verschlechterung der Situation (7-Tage-Inzidenz von 800 und eine Belegung der Intensivbetten von 100 %)"=1)

# get labels
Z_labels <- read_dta(vignettepath) %>% 
    mutate(Z_1_1 = as.numeric(vignr),
          universal = as.numeric(costs)-1, 
          stringency = as.numeric(restictions)-1)

kable(Z_labels, booktabs = T)

Zs <- dplyr::select(Z_labels, Z_1_1, universal, stringency)

```

### Prep X, Y

```{r} 
df <- haven::read_dta("../../../4_data/Merge/Merged_W1_W2_W3_W4.dta") %>% 
  
  dplyr::filter(wave == 4)  %>% 
  
  # only 
  dplyr::filter(group == 4 | group == 5) %>% 
  # drop flagged cases 
  dplyr::filter(pr_error_exp7 != 1) %>% 
  # drop 14 cases with unknown vaccination status
  dplyr::filter(v_28 != 99) %>% 
  
  # prepare treatments
  mutate(
    Z_t1_1 = as.numeric(paste(c_0031)),
    Z_t1_2 = as.numeric(paste(c_0032)),
    Z_t2_1 = as.numeric(paste(c_0033_w4)),
    Z_t2_2 = as.numeric(paste(c_0034_w4))) %>% 
  
  left_join(Zs, by = c("Z_t1_1" = "Z_1_1")) %>% 
    dplyr::rename(universal_t1_1 = universal, stringency_t1_1 = stringency)  %>% 
    left_join(Zs, by = c("Z_t1_2" = "Z_1_1")) %>% 
      dplyr::rename(universal_t1_2 = universal, stringency_t1_2 = stringency)  %>% 
    left_join(Zs, by = c("Z_t2_1" = "Z_1_1")) %>% 
      dplyr::rename(universal_t2_1 = universal, stringency_t2_1 = stringency)  %>% 
    left_join(Zs, by = c("Z_t2_2" = "Z_1_1")) %>% 
      dplyr::rename(universal_t2_2 = universal, stringency_t2_2 = stringency)  %>% 
  
  mutate(
      severity_t1 = dplyr::recode(c_0106, !!!severity_codes),
      severity_t2 = dplyr::recode(c_0107, !!!severity_codes))  %>%
  
  # Outcomes


  mutate(
    
    # random vignette for each round
    random_vignette1 = c_0108,
    random_vignette2 = c_0109,
    
    # rating
    rating_t1_1 = v_451/10,
    rating_t1_2 = v_452/10,
    rating_t2_1 = v_459/10,
    rating_t2_2 = v_460/10,
    
    # vaccine probability
    vaccine_probability_t1_1 = v_453/10,
    vaccine_probability_t1_2 = v_454/10,
    vaccine_probability_t2_1 = v_461/10,
    vaccine_probability_t2_2 = v_462/10,


    # choice: for choice there is one outcome indicating if first or second item is chosen
    choice_t1_1 = 2 - v_449,
    choice_t1_2 = v_449 - 1,
    choice_t2_1 = 2 - v_458,
    choice_t2_2 = v_458 - 1,


    # trust: trust is asked only once for a random vignette
    # Within round differencing not possible here
    trust_t1_1 = ifelse(random_vignette1==1, v_455/10, NA),
    trust_t1_2 = ifelse(random_vignette1==2, v_455/10, NA),
    trust_t2_1 = ifelse(random_vignette2==1, v_463/10, NA),
    trust_t2_2 = ifelse(random_vignette2==2, v_463/10, NA),

    
    # Differences
    vaccine_probability_D1 = vaccine_probability_t1_2 - vaccine_probability_t1_1,
    vaccine_probability_D2 = vaccine_probability_t2_2 - vaccine_probability_t2_1,
    
    rating_D1 = rating_t1_2 - rating_t1_1,
    rating_D2 = rating_t2_2 - rating_t2_1,

    choice_D1 = choice_t1_2 - choice_t1_1,
    choice_D2 = choice_t2_2 - choice_t2_1,
    
    universal_D1  = universal_t1_2 - universal_t1_1,
    universal_D2  = universal_t2_2 - universal_t2_1,

    stringency_D1  = stringency_t1_2 - stringency_t1_1,
    stringency_D2  = stringency_t2_2 - stringency_t2_1,

    )
```


## Semi stack DF (2 observations per person)

Take differences within rounds for each subject

```{r}

# Selection

diff_names <- c("ID", "severity", "universal", "stringency", "choice", "vaccine_probability", "rating", "round")

df_diff_1 <- df %>% 
  
  dplyr::select(ID, severity_t1, universal_D1, stringency_D1, 
                choice_D1, vaccine_probability_D1, 
                rating_D1)  %>% mutate(round = 1)
names(df_diff_1) <-  diff_names

df_diff_2 <- df %>% 
  
  dplyr::select(ID, severity_t2, universal_D2, stringency_D2, 
                choice_D2, vaccine_probability_D2, 
                rating_D2)  %>% mutate(round = 2)
names(df_diff_2) <-  diff_names

df_dff <- bind_rows(df_diff_1, df_diff_2) %>%
  mutate(universal = universal - mean(universal),
         stringency = stringency - mean(stringency),
         severity = severity - mean(severity))
dim (df_dff)
```

### Long DF (4 observations per person)

```{r}
longs <- list(
long_data_11 = df %>% 

    dplyr::select(ID, severity_t1, stringency_t1_1, universal_t1_1,
                rating_t1_1, choice_t1_1, trust_t1_1, vaccine_probability_t1_1) %>% 
                  mutate(round = 1, vignette = 1),

long_data_12 = df %>% 
  dplyr::select(ID, severity_t1, stringency_t1_2, universal_t1_2,
                rating_t1_2, choice_t1_2, trust_t1_2, vaccine_probability_t1_2) %>% 
                  mutate(round = 1, vignette = 2),  

long_data_21 = df %>% 
  dplyr::select(ID, severity_t2, stringency_t2_1, universal_t2_1,
                rating_t2_1, choice_t2_1, trust_t2_1, vaccine_probability_t2_1) %>% 
                  mutate(round = 2, vignette = 1),  

long_data_22 = df %>% 
  dplyr::select(ID, severity_t2, stringency_t2_2, universal_t2_2,
                rating_t2_2, choice_t2_2, trust_t2_2, vaccine_probability_t2_2) %>% 
                  mutate(round = 2, vignette = 2))  

long_names <- c("ID", "severity", "stringency", "universal",
                "rating", "choice", "trust", "vaccine_probability", 
                "round", "vignette")

df_long <- lapply(longs, function(d) {names(d) <- long_names; d}) %>% bind_rows() # %>%
  #mutate(severity = severity - mean(severity), 
  #       stringency = severity - mean(severity), 
  #       universal = universal - mean(universal))

# Should be possible with pivot longer
# Or with (from Jonah)
# data.frame(ID = 1:2, var1_3 = 1:2, var1_4 = 1:2, var2_3 = 1:2, var2_4 = 1:2) %>% reshape(idvar='ID',varying=2:5,timevar='round',sep='_',direction='long')
```

### Check data integrity

Raw data looks like this:

```{r}
df %>% 
  dplyr::select(ID, starts_with("rating"), starts_with("severity"), starts_with("universal"), starts_with("stringency")) %>% 
  dplyr::filter(ID == df_dff$ID[1]) %>% t

```

Difference data looks like this:

```{r}
df_dff %>% 
  dplyr::select(ID, rating, severity, universal, stringency) %>% 
  dplyr::filter(ID == df_dff$ID[1])
```

# Covariate cleaning

```{r}
cov <- df %>% 
  # rename covariates
  rename_at(
    vars(var_list$var_name[var_list$transformed==0]), 
    ~ var_list$new_name[var_list$transformed==0]) %>% 
  mutate(status = ifelse(
      is.na(vaccination.intent),
      "Vaccinated",
      paste(vaccination.intent)
    ),
    status = dplyr::recode(
      status,
      "1" = "Acceptant",
      "2" = "Refusing",
      "3" = "Undecided"
    ),
     casmin = case_when(
                    education== 1 & v_142== 7 ~ 0,
                    education== 2 & v_142== 7 ~ 1,
                    (education==2) & (v_142==1 | v_142==2 | v_142==3) ~ 2,
                    (education==1) & (v_142==1 | v_142==2 | v_142==3)  ~ 2,
                    education== 3 & v_142== 7 ~ 3,
                    (education==3) & (v_142==1 | v_142==2 | v_142==3) ~ 4,
                    (education==4 | education==5) & (v_142==7)~ 5,
                    (education==4 | education==5) & (v_142==1 | v_142==2 | v_142==3) ~ 6,
                    (education==4)  ~ 7,
                    (education==5)  ~ 8,
                    TRUE ~ NA_real_ # This is for all other values not covered by the above.
    ),
    eduyears = case_when(
                    casmin == 0 ~ 8,
                    casmin == 1 ~ 9,
                    casmin == 2 ~ 12,
                    casmin == 3 ~ 10,
                    casmin == 4 ~ 13,
                    casmin == 5 ~ 13,
                    casmin == 6 ~ 15,
                    casmin == 7 ~ 16,
                    casmin == 8 ~ 18,
                    TRUE ~ NA_real_ # This is for all other values 
),
    eduyears = (eduyears - min(eduyears, na.rm = TRUE))/max(eduyears, na.rm = TRUE),
    household.larger = (household.size > 2)*1,
    covid.media = 1-(covid.media-1)/4, 
    vaccinated = 1*(vaccination == 1),
    network.vaccinated = (network.vaccinated-1)/4,
    covid.infection = 1*(covid.infection == 1),
    covid.infection.proximity = (covid.infection.proximity-1)/2,
    covid.information = 1- (covid.information-1)/4,
    covid.rules.mask = 1- (covid.rules.mask-1)/5,
    covid.rules.distance = 1- (covid.rules.distance-1)/5,
    support.distance = 1-(support.distance-1)/4, 
    covid.income = 1-(covid.income-1)/4, 
    voted = 1*(voter.turnout ==1),
    age2 = (age - min(age))/(max(age) - min(age)),
    male = 1*(gender == 2), 
    political.interest = 1 - (political.interest-1)/3,
    left.right = (left.right-1)/10,
    CDU.CSU = 1*(party.id <= 2),
    CDU.CSU = ifelse(is.na(CDU.CSU), 0, CDU.CSU),
    SPD = 1*(party.id ==3),
    SPD = ifelse(is.na(SPD), 0, SPD),
    AfD = 1*(party.id ==4),
    AfD = ifelse(is.na(AfD), 0, AfD),
    Greens = 1*(party.id ==5),
    Greens = ifelse(is.na(Greens), 0, Greens),
    FDP = 1*(party.id ==6),
    FDP = ifelse(is.na(FDP), 0, FDP),
    Left = 1*(party.id ==7),
    Left = ifelse(is.na(Left), 0, Left),
    No.party = 1*(party.id == 9),
    No.party = ifelse(is.na(No.party), 0, No.party),
    solidarity = solidarity/10,
    international.solidarity = international.solidarity/10,
    EU.support = EU.support/10,
    migration.support = migration.support/10,
    Employed = 1*(Employment.Status==1),
    citizenship = (citizenship==3)*1,
    Country.of.birth  = 1*(Country.of.birth==2),
    risk = risk/10,
    trust.general = trust.general/10,
    trust.government = trust.government/4,
    trust.experts = trust.experts/4,
    trust.country = trust.country/4,
    trust.media =  trust.media/4,
    trust.healthcare = trust.healthcare/4,
    acceptant = 1*(vaccination.intent == 1),
    acceptant = ifelse(is.na(vaccination.intent), 1, acceptant),
    refusing = vaccination.intent == 2,
    refusing = ifelse(is.na(vaccination.intent), 0, refusing),
    undecided = 1*(vaccination.intent == 3),
    undecided = ifelse(is.na(vaccination.intent), 0, undecided),
    health = (health - 1)/6,
    health2 = 1*(health2 == 1),
    covid.surveys = ifelse(covid.surveys == 99, NA, covid.surveys),
    east.west =ifelse(federal.state== "4" |#"Brandenburg"
                                  federal.state== "8" |#"Mecklenburg-Vorpommern"
                                  federal.state== "13"|#"Sachsen"
                                  federal.state== "14"|#Sachsen-Anhalt
                                  federal.state== "16" #"Thüringen"
                                  , 1, 0)
  )

df_long <- df_long   %>% left_join(cov, by = c("ID" = "ID")) 
df_dff <- df_dff   %>% left_join(cov, by = c("ID" = "ID")) 



```



# Summary stats

## Prep

```{r, results = "asis"}
# covariates

df_small <- 
  df_long %>% dplyr::select(all_of(covariate_names)) %>% 
  # select_if(is.numeric) %>% 
  drop_na() %>% group_by(ID) %>% slice(1) %>% ungroup()

# get labels
label <- read_dta(vignettepath) %>% 
    mutate(vignr = as.numeric(vignr))
str(label$vignr)



```

## Main summary Stats

```{r }

summ_stats  <- 
  df_small %>% 
  #dplyr::select(-c('ID')) %>% 
  fBasics::basicStats() 

summ_stats <- round(summ_stats, 2) %>% 
  t() %>% 
  as.data.frame() %>% 
  dplyr::select("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum") %>% 
  rename('Lower quartile'= '1. Quartile', 'Upper quartile' ='3. Quartile') 

# Add in labels
summ_stats <- summ_stats %>% 
  dplyr::mutate(Variable = factor(rownames(summ_stats), var_list$new_name, var_list$label)) %>% 
  relocate(Variable)
```

```{r summary_stats_table, results="asis", message=FALSE, echo=FALSE}
# Pretty-printing in HTML
summ_stats_table <- kable(summ_stats, format ="html", digits = 3, booktabs = TRUE, row.names = FALSE)
kable_styling(summ_stats_table,
              bootstrap_options=c("striped", "hover", "condensed", "responsive"),
              full_width=FALSE)

tab_1 <- kable(summ_stats, 
               format = "html", 
               digits = 2, caption = 
                 "Summary statistics", 
               booktabs = T, linesep = "", label = "SummStats", row.names = FALSE) %>% 
  kable_styling(latex_options="scale_down")

fileConn <- file("2_output/tab_1.tex")
 writeLines(tab_1, fileConn)
close(fileConn)

```

Pairwise correlations.

```{r cor plot, echo=FALSE, eval = FALSE, fig.width=10, fig.height=10, warning=FALSE}
pairwise_pvalues <- psych::corr.test(df_small, df_small)$p
  df_small %>% 
  cor %>% 
  corrplot::corrplot(type="upper",
         tl.col="black",
         order="original",
         tl.cex=1,
        addgrid.col = "black",
         p.mat=pairwise_pvalues,
         sig.level=0.05,
         number.font=10,
         insig="blank")


```



```{r, eval = FALSE}

family_order <- var_list %>% group_by(family) %>% slice(1) %>% arrange(Family_order) %>% pull(family)

correlates <- 
  list("acceptant", "refusing", "undecided") %>%
  lapply(function(y)
  lapply(setdiff(covariate_names, tolower(statuses)), function(x)
lm_robust(as.formula(paste(y, "~", x)), data = df_small) %>% tidy %>% dplyr::mutate(y=y, x=x)) %>% bind_rows) %>% bind_rows %>% dplyr::filter(term!="(Intercept)" & !(x %in% c("acceptant", "refusing", "undecided"))) %>% 
  dplyr::mutate(x = factor(x, rev(var_list$new_name), rev(var_list$label))) %>% 
  left_join(var_list %>% dplyr::rename(term = new_name) %>% dplyr::select(term, family)) %>% 
  dplyr::mutate(family = factor(family, family_order))


fig_cov <- 
  correlates %>% 
dplyr::mutate(y = factor(y, c("acceptant", "undecided", "refusing" ))) %>% 
dplyr::filter(x!="federal.state") %>% 
  dplyr::filter(x!="status") %>% 
ggplot(aes(estimate    , x)) + geom_point() + facet_grid(family ~ y, scales = "free_y") + ylab("") + xlab("How much more or less likely to be [acceptant / undecided / refusing] at baseline")  + 
  geom_vline(xintercept = 0, color = "red") +
  theme_bw() +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = .25)

fig_cov

df_small %>% 
  dplyr::select(status) %>% 
      group_by(status) %>% 
      summarise(n = n()) %>% 
      mutate(totalN = (cumsum(n)),
             percent = round((n / sum(n)), 3),
             cumpercent = round(cumsum(freq = n / sum(n)),3))

fig_1 <- cov %>% ggplot(aes(status)) + 
  geom_hline(yintercept=0.85, linetype="longdash", lwd=0.35, colour = "#B55555") +
  geom_bar(aes(y = (..count..)/sum(..count..)),width = 0.6,alpha = 0.5) + 
  scale_y_continuous(labels=scales::percent) +
  theme_bw(base_size=16)+
  theme(axis.title.y = element_blank())+
  ylab("Percent (%)")+
  coord_flip()
fig_1   

pdf("2_output/fig_descriptive_1.pdf", height = 3, width = 6)
fig_1
dev.off()

cov$fear

fig_2 <- 
  cov %>% dplyr::select(ID, starts_with("fear.")) %>% 
  mutate_if(is.character, as.numeric) %>% 
  melt(variable.name = "group", id.vars = "ID") %>% 
  mutate(group = 
           factor(group,
                  c("fear.longterm", "fear.admission", "fear.effectiveness", "fear.side.effects", "fear.no.danger"),
                  c("Longterm Consequences", "Doubt approval process", "Doubt effectiveness", "Side Effects", "Covid not dangerous"))) %>% 
  group_by(group) %>% 
  summarize(mean = 100*mean(value, na.rm = TRUE))  %>% 
  ggplot() +
  geom_bar(aes(group, mean), stat = "identity", width = 0.6,alpha = 0.5)+
    geom_hline(yintercept=73.0, linetype="longdash", lwd=0.35, colour = "#B55555") +
  theme_bw(base_size=16)+
  ylab("Percent (%)")+
  theme(axis.title.y = element_blank())+
  coord_flip()
 fig_2
 
pdf("2_output/fig_descriptive_2.pdf", height = 4, width = 8)
fig_2
dev.off()

```

# Results 

## Analysis 0: Model comparisons

Check on similarity of performance of fixed effects and difference estimators.

```{r}
df_long_norm <- df_long %>%
  mutate(universal = universal - mean(universal),
         stringency = stringency - mean(stringency),
         severity = severity - mean(severity))

models_diff <- 
  list(
    rating =   lm_robust(rating ~ severity*universal*stringency,  data = df_dff),
    choice =  lm_robust(choice ~ severity*universal*stringency,  data = df_dff),
    vaccine_probability = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  data = df_dff)) 


models_fe <-
  list(
    rating =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm, se_type = "stata"),
    choice =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm, se_type = "stata"),
    vaccine_probability = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm, se_type = "stata"))



models_diff_fe <-
  list(
    rating =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_dff, se_type = "stata"),
    choice =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_dff, se_type = "stata"),
    vaccine_probability = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_dff, se_type = "stata"))

comparisons <-
  list(fe = models_fe, diff = models_diff, diff_fe = models_diff_fe) %>%
  lapply(function(L) L %>% lapply(tidy) %>% bind_rows(.id = "outcome")) %>% 
  bind_rows(.id = "strategy")

comparisons %>% ggplot(aes( estimate, term, color = strategy)) + geom_point() + facet_wrap(~outcome)
```

## Main Analysis: Table 1

```{r, results = "asis"}
# new


pap_1_all <- function(df = df_long_norm) {
  
df_long_unv <- dplyr::filter(df_long, vaccinated == 0)

  list(
    rating =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long, se_type = "stata"),
    
    choice =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long, se_type = "stata"),
    
    trust = 
  lm_robust(trust ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long, se_type = "stata"),
  # UNV

      vaccine_probability = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long, se_type = "stata"),
  

        rating_sub =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
    
    choice_sub =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
    
    trust_sub = 
  lm_robust(trust ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
  
    vaccine_probability_sub = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata")
  
)
}

custom.coef.map =  list("severity" = "Pandemic severity",
                         "stringency" = "Policy stringency",
                         "universal" = "Policy universality",
                         "severity:stringency" = "Severity * Stringency",
                         "severity:universal" = "Severity * Universality",
                         "severity:universal" = "Stringency * Universality",
                         "severity:stringency:universal" = "Triple interaction"
                         )

pap_1_write <- function(model_list, 
                      filename = "2_output/pap2.tex", 
                      add_text = " Full sample of respondents.",
                      label = "tab:saturated_all") {
fileConn <- file(filename)
writeLines(texreg(model_list, float.pos = "h!", 
                  include.ci = FALSE, 
                  caption = paste0("\\label{", label, "}Main results, with interactions and individual fixed effects. All treatments are centered on zero. First four columns employ data on all respondents; last four on unvaccinated respondents only.", add_text),
                  custom.coef.map =  custom.coef.map,
                  custom.header = list("All" = 1:4, "Unvaccinated" = 5:8),
                  model.names = rep(c("Rating", "Choice",  "Trust", "Will vaccinate"), 2),
                  digits = 3), fileConn)
close(fileConn)
}

main_results <- pap_1_all()
main_results %>% pap_1_write()

```

```{r, results = "asis"}
htmlreg(main_results, include.ci = FALSE, 
        #custom.coef.map =  custom.coef.map,
        digits = 3,
        custom.header = list("Vaccinated" = 1:4, "Unvaccinated" = 5:8))
```

### For text: Head to head comparisons

```{r}

# LM comparison
df_long %>% 
  # dplyr::filter(severity == 1) %>% 
  dplyr::filter(stringency <= 0) %>% 
  group_by(severity, ID, universal) %>% mutate(choice = mean(stringency) == -.5) %>% ungroup %>% 
  dplyr::filter(choice) %>% arrange(ID) %>% 
  # dplyr::select(id, outcome, choice, stringency, severity, universal) %>% # View
  group_by(severity, stringency) %>% summarize(n(), choice = mean(choice))

# MH comparison
df_long %>% 
  # dplyr::filter(severity == 1) %>% 
  dplyr::filter(stringency >= 0) %>% 
  group_by(severity, ID, universal) %>% mutate(choice = mean(stringency) == .5) %>% ungroup %>% 
  dplyr::filter(choice) %>% arrange(ID) %>% 
  # dplyr::select(id, outcome, choice, stringency, severity, universal) %>% # View
  group_by(severity, stringency) %>% summarize(n(), choice = mean(choice))

# LH comparison
df_long %>% 
  # dplyr::filter(severity == 1) %>% 
  dplyr::filter(stringency != 0) %>% 
  group_by(severity, ID, universal) %>% mutate(choice = mean(stringency) == 0) %>% ungroup %>% 
  dplyr::filter(choice) %>% arrange(ID) %>% 
  # dplyr::select(id, outcome, choice, stringency, severity, universal) %>% # View
  group_by(severity, stringency) %>% summarize(n(), choice = mean(choice))

```

## Structural analysis: Figure 1

We use the model in the PAP to estimate ideal points and indifference curves assuing a generalized quadratic loss function.

```{r, fig.height = 12, fig.width = 4}
# helpers

df_long <- 
  df_long %>% mutate(
    severity_2 = severity^2, stringency_2 = stringency^2, universal_2 = universal^2)

par_names <- c("q_s", "r_ss", "q_r", "r_rr", "q_u", "r_uu", "r_sr", "r_su", "r_ru")

utility <- function(severity, stringency, universal, pars){
  pars$q_s*severity + pars$q_r*stringency  + pars$q_u*universal +
    (pars$r_ss*severity^2 + pars$r_rr*stringency^2 +  pars$r_uu*universal^2 +
       pars$r_sr*severity*stringency + pars$r_su*severity*universal +
       pars$r_ru*stringency*universal)}

fitted <- function(pars) 
  expand.grid(severity = seq(-1,1,1), 
              stringency = seq(-1,1,.05), 
              universal = seq(-1,1,.05)) %>% 
  data.frame() %>% 
  mutate(utility = utility(severity, stringency, universal, pars),
         severity_2 = severity^2, stringency_2 = stringency^2, universal_2 = universal^2) %>% 
    mutate(severity = factor(severity, -1:1, conditions_labels))

plot_ideals <- function(j)
  u[[j]] %>% 
  #,
  # stringency = factor(stringency, -1:1, policy_severity_labels),
  # universal = factor(universal, -1:1, policy_universal_labels)
  #) %>% 
  ggplot(aes(stringency, universal, z= utility)) + 
  # geom_tile() + 
  geom_contour(bins = 4, colour = "red") + 
  facet_wrap(~severity) + 
  xlab("Stringency") + ylab("Universality") +
  geom_point(data = max_u[[j]], 
             mapping = aes(stringency, universal), 
             color = "red")+
  theme_bw()  +
  scale_x_continuous(breaks=c(-.9,.9), labels = c("Least\nstringent", "Most\nstringent"))  +
  scale_y_continuous(breaks=c(-.9,.9), labels = c("Most\nExceptions", "Most\nUniversal"))

```

```{r, fig.height = 11, fig.width = 9}
# Implement: All
pap_2 <- 
  list(all = df_long,
       vaccinated = dplyr::filter(df_long, vaccinated==1),
       unvaccinated = dplyr::filter(df_long, vaccinated==0)) %>% 
lapply(function(data) lm_robust(
    rating ~ severity + severity_2 + stringency + stringency_2 + universal + universal_2 + 
      severity:stringency + severity:universal + stringency:universal,
    data = data,
    fixed_effects = ~ID, 
    se_type = "stata")) 

pars  <- lapply(pap_2, function(m) {
  pars <- m %>% tidy %>% pull(estimate) %>% as.list
  names(pars) <- par_names
  pars})

u     <- lapply(pars, fitted)
max_u <- lapply(u, function(v) 
  v %>% group_by(severity) %>% dplyr::filter(utility == max(utility)))

# Plot

ideals_all <- plot_ideals(1) + ggtitle("All")
ideals_vacc <- plot_ideals(2) + ggtitle("Vaccinated")
ideals_unv <- plot_ideals(3) + ggtitle("Unvaccinated")

fig_3  <- ggarrange(ideals_all,ideals_vacc,ideals_unv,
          ncol = 1, nrow = 3, common.legend = TRUE, legend="bottom")
fig_3


pdf("2_output/fig_ideals_1.pdf", width = 9, height = 11)
fig_3
dev.off()

```


### Fitted values

```{r}
fitted_values <- function(Y = "trust", y_lab = "Trust", dff = df_long, adjust = TRUE) {
  
  dff$Y <- unlist(dff[Y][1])
  
  dff <- 
    dff %>% dplyr::filter(!is.na(Y)) %>% 
    mutate(universal_0 = 1*(universal==0),
           universal_1 = 1*(universal==1),
           type_numeric = 2 + vaccinated - refusing)

# Y
pap_analysis_1 <- lm_robust(
  Y ~ severity*stringency*universal*vaccinated,
  data = dff, fixed_effects = ~ID, se_type = "stata")  

lows <- dff %>% group_by(ID) %>% 
  summarize(mean_Y = mean(Y, na.rm = TRUE)) %>% 
  arrange(mean_Y) %>% slice(1:2)

new_data <- expand.grid(
  severity = c(-1:1), 
  stringency = c(-1:1), 
  universal = c(-1:1), 
  vaccinated = 0:1) %>% data.frame() %>% 
  mutate(
    ID = case_when(
      vaccinated == 1 ~ lows$ID[1],
      vaccinated == 0 ~ lows$ID[2]),
    universal_0 = 1*(universal==0),
    universal_1 = 1*(universal==1),
    type = vaccinated,
    type = factor(vaccinated, 1:0, c("Vaccinated", "Unvaccinated"))) 

means <- dff %>% group_by(vaccinated) %>% 
  summarize(Y = mean(Y, na.rm = TRUE))

# Add on the fixed effect
new_data <- new_data %>% 
  mutate(Y = predict(pap_analysis_1, newdata = new_data))

if(adjust) new_data <- new_data %>% 
  mutate(Y = Y + means$Y[vaccinated +1] )

new_data %>% 
  mutate(
    severity = factor(severity, c(-1,0,1), conditions_labels),
    universal = factor(universal, -1:1, policy_universal_labels))  %>%

  
ggplot(aes(stringency, Y, color = universal)) +
  facet_grid(type ~ severity) + geom_point() + geom_line() + #ylim(0,6)+
  theme_bw()  + ylab(y_lab) + xlab("Severity of stringency") +
  scale_x_continuous(breaks=c(-.8,.8), labels = c("Least", "Most")) +
  ylim(0,1)

}


```

```{r, fig.height= 11, fig.width = 11}
fig_1_all <- ggarrange(

fitted_values("rating", "Policy Rating"),
fitted_values("choice", "Probability policy is preferred", adjust = FALSE),
fitted_values(),
fitted_values("vaccine_probability", y_lab = "Will vaccinate"),
common.legend = TRUE, legend="bottom",
ncol = 2, nrow = 2)

pdf("2_output/fitted.pdf", height = 10, width = 10)
fig_1_all
dev.off()

fig_1_all
```


```{r}

df_long_norm_refresh <-dplyr::filter(df_long_norm, group == 5)

pap_1_refresh <- function(df = df_long_norm_refresh) {
  
df_long_unv <- dplyr::filter(df_long, vaccinated == 0,group == 5)

  list(
    rating =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm_refresh, se_type = "stata"),
    
    choice =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm_refresh, se_type = "stata"),
    
    trust = 
  lm_robust(trust ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm_refresh, se_type = "stata"),
  # UNV

      vaccine_probability = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_norm_refresh, se_type = "stata"),
  

        rating_sub =   lm_robust(rating ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
    
    choice_sub =  lm_robust(choice ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
    
    trust_sub = 
  lm_robust(trust ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata"),
  
    vaccine_probability_sub = 
  lm_robust(vaccine_probability ~ severity*universal*stringency,  fixed_effects = ~ ID, data = df_long_unv, se_type = "stata")
  
)
}

custom.coef.map =  list("severity" = "Pandemic severity",
                         "stringency" = "Policy stringency",
                         "universal" = "Policy universality",
                         "severity:stringency" = "Severity * Stringency",
                         "severity:universal" = "Severity * Universality",
                         "severity:universal" = "Stringency * Universality",
                         "severity:stringency:universal" = "Triple interaction"
                         )

pap_1_write <- function(model_list, 
                      filename = "2_output/pap3.tex", 
                      add_text = " Refreshment Sample",
                      label = "tab:saturated_all") {
fileConn <- file(filename)
writeLines(texreg(model_list, float.pos = "h!", 
                  include.ci = FALSE, 
                  caption = paste0("\\label{", label, "}Main results, with interactions and individual fixed effects. All treatments are centered on zero. First four columns employ data on all respondents; last four on unvaccinated respondents only.", add_text),
                  custom.coef.map =  custom.coef.map,
                  custom.header = list("All" = 1:4, "Unvaccinated" = 5:8),
                  model.names = rep(c("Rating", "Choice",  "Trust", "Will vaccinate"), 2),
                  digits = 3), fileConn)
close(fileConn)
}

main_results <- pap_1_refresh()
main_results %>% pap_1_write()
     
```


