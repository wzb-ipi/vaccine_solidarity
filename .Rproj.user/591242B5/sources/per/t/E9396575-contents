---
title: "Paper: Solidarity and Performance Voting'"
author:
 - Heike Klüver, Humboldt
 - Felix Hartmann, Humboldt
 - Macartan Humphreys, WZB and Columbia
 - Ferdinand Geißler, Humboldt
 - Johannes Giesecke, Humboldt
date: "May 2021"
output:
  html_document:
    number_sections: yes
    toc: yes
    toc_float: yes
    toc_depth: 2
    self_contained: yes
    code_folding: hide
  pdf_document:
    toc: yes
  word_document:
    toc: yes
    toc_depth: '2'
keywords: vaccine hesitancy, covid, transaction costs
theme: null
abstract: 
bibliography: references.bib  
editor_options:
  chunk_output_type: console
---


# Housekeeping

## Options

```{r setup, echo=TRUE}
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, comment=NA)
options(qwraps2_markup = "markdown")

## Packages
if (!require(pacman)) install.packages("pacman")

pacman::p_load(
  ggridges,    # plot
  cregg,       # conjoint
  readxl,      # read excel
  gtrendsR,    # google trends
  aod,         # hypothesis testing (1.3.1)
  car,         # linear hypothesis testing for causal tree (3.0-2)
  corrplot,    # Correlations (0.84)
  DeclareDesign, 
  dplyr,       # Data manipulation (0.8.0.1)
  evtree,      # evolutionary learning of globally optimal trees (1.0-7)
  fastDummies,
  fBasics,     # Summary statistics (3042.89)
  ggplot2,
  grf,         # Generalized random forests (0.10.2)
  haven,       # load sav
  kableExtra,  # Prettier RMarkdown (1.0.1)
  knitr,
  labelled,
  psych,       # Correlation p-values (1.8.12)
  purrr,
  rpart,       # Classification and regression trees, or CART (4.1-13)
  reshape2,
  rpart.plot,  # Plotting trees (3.0.6)
  readr,       # Reading csv files (1.3.1)
  sjlabelled,
  stats,
  summarytools,
  texreg,
  tidyverse,
  tidyselect,
  tidyr,       # Database operations (0.8.3)
  treeClust,   # Predicting leaf position for causal trees (1.1-7)
  tibble)      # Modern alternative to data frames (2.1.1)


# Set seed for reproducibility
set.seed(201911) 

# Paths
# datapath <- "../../../4_data/wave_2/D-P21-13185 HU Berlin Impfskeptiker_Welle 2_Testdatensatz.sav"


# First Wave: to get the covariates 

firstwave <- "../../../4_data/wave_1/D-P21-13185 HU Berlin Impfskeptiker_Finaler_Datensatz.sav"


datapath <- "../../../4_data/wave_2/D-P21-13185 HU Berlin Impfskeptiker_Welle 2_Finaler_Datensatz.sav"

vignettepath <- "../../../4_data/wave_2/W2_exp3_vignettes_universe.dta"

# data from the 9th of September
fourthwave <- "../../../4_data/wave_4/D-P21-13185 HU Berlin Impfskeptiker_Welle 4_Finaler_Datensatz---Combined"
vignettepath_7 <- "../../../4_data/wave_4/W4_exp7_vignettes_universe_-_20210831.dta"


fig_1_path <- "../2_figures/figure_1.pdf"
fig_2_path <- "../2_figures/figure_2.pdf"
fig_3_path <- "../2_figures/figure_3.pdf"
fig_4_path <- "../2_figures/figure_4.pdf"
tab_1_path <- "../2_figures/table_1.tex"
tab_2_path <- "../2_figures/table_2.tex"
tab_3_path <- "../2_figures/table_3.tex"

corr_matrix_plot_path <- "../2_figures/figure_6.pdf"


# variable names and labels
var_list_1<- read.csv("1_input/varsfirstwave.csv") %>% arrange(order)
var_list_2 <- read.csv("1_input/varssecondwave.csv") %>% arrange(order)

var_list<-rbind(var_list_1,var_list_2)

outcomes <- c("solidarity_bahaviour", "solidarity_attitude")
outcome_labels <- c("Solidarity Bahaviour", "Solidarity Attitude")
treatments <- c("treatment_video")
treatment_labels <- c("Treatment")

# Training fraction
train_fraction <- 1  # for causal forests: currently all data used

```

```{r }

covariate_names_1 <- var_list_1$new_name[var_list_1$covariate==1]
covariate_names_2 <- var_list_2$new_name[var_list_2$covariate==1]

```

### Get First Wave data 

```{r, prep}
firstwave <- read_sav(firstwave) %>%
  rowid_to_column("ID")  %>%
  # rename covariates
  rename_at(vars(var_list_1$var_name[var_list_1$transformed==0]), ~ var_list_1$new_name[var_list_1$transformed==0]) %>%
  # transformations
  mutate( casmin = case_when(
                    education== 1 & v_142== 7 ~ 0,
                    education== 2 & v_142== 7 ~ 1,
                    (education==2) & (v_142==1 | v_142==2 | v_142==3) ~ 2,
                    (education==1) & (v_142==1 | v_142==2 | v_142==3)  ~ 2,
                    education== 3 & v_142== 7 ~ 3,
                    (education==3) & (v_142==1 | v_142==2 | v_142==3) ~ 4,
                    (education==4 | education==5) & (v_142==7)~ 5,
                    (education==4 | education==5) & (v_142==1 | v_142==2 | v_142==3) ~ 6,
                    (education==4)  ~ 7,
                    (education==5)  ~ 8,
                    TRUE ~ NA_real_ # This is for all other values not covered by the above.
    ),
    eduyears = case_when(
                    casmin == 0 ~ 8,
                    casmin == 1 ~ 9,
                    casmin == 2 ~ 12,
                    casmin == 3 ~ 10,
                    casmin == 4 ~ 13,
                    casmin == 5 ~ 13,
                    casmin == 6 ~ 15,
                    casmin == 7 ~ 16,
                    casmin == 8 ~ 18,
                    TRUE ~ NA_real_ # This is for all other values 
),
    eduyears = (eduyears - min(eduyears, na.rm = TRUE))/max(eduyears, na.rm = TRUE),
    household.larger = (household.size > 2)*1,
    voted = 1*(voter.turnout ==1),
    age2 = (age - min(age))/(max(age) - min(age)),
    male = 1*(gender == 2), 
    Employed = 1*(Employment.Status==1),
    citizenship = (citizenship==3)*1,
    Country.of.birth  = 1*(Country.of.birth==2),
    east.west =ifelse(federal.state== "4" |#"Brandenburg"
                                  federal.state== "8" |#"Mecklenburg-Vorpommern"
                                  federal.state== "13"|#"Sachsen"
                                  federal.state== "14"|#Sachsen-Anhalt
                                  federal.state== "16" #"Thüringen"
                                  , 1, 0)
  )%>% # select those covariates that are missing in wave 2 
  select(covariate_names_1,"lfdn")

```

### Get Second Wave data 

```{r }
# put in seperate files later
df <- read_sav(datapath)%>%
  dplyr::rename(
    treatment_video = c_0014,
    vignette1 = c_0031,
    vignette2 = c_0032,
    vignette3 = c_0033,
    vignette4 = c_0034,
    vignette5 = c_0035,
    vignette6 = c_0036,
    outcome_donation = v_282,
    conjoint_choice1 = v_328,
    conjoint_choice2 = v_329,
    conjoint_choice3 = v_333,
    conjoint_rating1 = v_321,
    conjoint_rating2 = v_322,
    conjoint_rating3 = v_331,
    conjoint_rating4 = v_332,
    conjoint_rating5 = v_335,
    conjoint_rating6 = v_336,
    sign_letter =  v_241,
    incumbent_voting = v_327,
    post.performance= v_228,
    mc.performance.germany = v_224,
    mc.performance.uk = v_225,
    mc.performance.au = v_226,
    satisvaction.CDU= v_230,
    satisvaction.CSU= v_231,
    satisvaction.SPD= v_232,
    satisvaction.Merkel= v_233,
    satisvaction.Spahn= v_236,
    satisvaction.PM= v_237,
    satisvaction.vdLeyen= v_238,
    satisvaction.mayor= v_239
  ) %>%
    # rename covariates
rename_at(vars(var_list_2$var_name[var_list_2$transformed==0]), ~  var_list_2$new_name[var_list_2$transformed==0]) %>% 
  dplyr::mutate(
     # 1: the highest vaccination rate, 3: the lowest vaccination rate)
     mc.performance.germany = dplyr::recode(mc.performance.germany, 
                         "1" = "3",
                         "2" = "2",
                         "3" = "1"),
      mc.performance.uk = dplyr::recode(mc.performance.uk, 
                         "1" = "3",
                         "2" = "2",
                         "3" = "1"),
      mc.performance.au = dplyr::recode(mc.performance.au, 
                         "1" = "3",
                         "2" = "2",
                         "3" = "1"),
     incumbent_voting = dplyr::recode(incumbent_voting, 
                         "1" = "1",
                         "2" = "0"),
     letter = dplyr::recode(v_240, 
                         "1" = "1",
                         "2" = "-1",
                         "3" = "0"),
      status = ifelse(
      is.na(vaccination.intent),
      "Vaccinated",
      paste(vaccination.intent)
    ),
    status = dplyr::recode(
      status,
      "1" = "Acceptant",
      "2" = "Hesitant",
      "3" = "Undecided"
    ),
    # covariates
    covid.media = 1-(covid.media-1)/4, 
    vaccinated = 1*(vaccination == 1),
    network.vaccinated = (network.vaccinated-1)/4,
    covid.infection = 1*(covid.infection == 1),
    covid.infection.proximity = (covid.infection.proximity-1)/2,
    covid.information = 1- (covid.information-1)/4,
    covid.rules.mask = 1- (covid.rules.mask-1)/5,
    covid.rules.distance = 1- (covid.rules.distance-1)/5,
    support.distance = 1-(support.distance-1)/4, 
    covid.income = 1-(covid.income-1)/4, 
    political.interest = 1 - (political.interest-1)/3,
    left.right = (left.right-1)/10,
    CDU.CSU = 1*(party.id <= 2),
    CDU.CSU = ifelse(is.na(CDU.CSU), 0, CDU.CSU),
    SPD = 1*(party.id ==3),
    SPD = ifelse(is.na(SPD), 0, SPD),
    AfD = 1*(party.id ==4),
    AfD = ifelse(is.na(AfD), 0, AfD),
    Greens = 1*(party.id ==5),
    Greens = ifelse(is.na(Greens), 0, Greens),
    FDP = 1*(party.id ==6),
    FDP = ifelse(is.na(FDP), 0, FDP),
    Left = 1*(party.id ==7),
    Left = ifelse(is.na(Left), 0, Left),
    No.party = 1*(party.id == 9),
    No.party = ifelse(is.na(No.party), 0, No.party),
    solidarity = solidarity/10,
    international.solidarity = international.solidarity/10,
    EU.support = EU.support/10,
    migration.support = migration.support/10,
    trust = trust/10,
    trust.government = trust.government/4,
    trust.experts = trust.experts/4,
    trust.country = trust.country/4,
    trust.media =  trust.media/4,
    trust.healthcare = trust.healthcare/4,
    acceptant = 1*(vaccination.intent == 1),
    acceptant = ifelse(is.na(vaccination.intent), 1, acceptant),
    hesitant = vaccination.intent == 2,
    hesitant = ifelse(is.na(vaccination.intent), 0, hesitant),
    undecided = 1*(vaccination.intent == 3),
    undecided = ifelse(is.na(vaccination.intent), 0, undecided),
    health = (health - 1)/6,
    health2 = 1*(health2 == 1),
    # conjoint
    solidarity_bahaviour = (6 - as.numeric(outcome_donation))/5,  # now higher values are more solidarity (check)
    treatment_video=1*(treatment_video ==2), # 2=no video
    prioritize_germany = international.solidarity/10,
    solidarity_attitude = dplyr::recode(v_351, 
                         "1" = 1,
                         "2" = 0),
     factor = dplyr::recode(c_0015,
                   "1" = "Negative Sociotropic Benchmark",
                   "2" = "Positive Sociotropic Benchmark",
                   "3" = "Negative Egotropic Benchmark",
                   "4" = "Positive Egotropic Benchmark",
                   "5" = "Sociotropic",
                   "6" = "Egotropic",
                   "7" = "Two-way Benchmark Sociotropic",
                   "8" = "Two-way Benchmark Egotropic",
                   "9" = "Control",#  groups 9 and 10 are control
                   "10" = "Control"),  
   positive =ifelse(factor== "Positive Sociotropic Benchmark" |
                   factor== "Positive Egotropic Benchmark" 
                   , 1, 0),
   negative =ifelse(factor== "Negative Sociotropic Benchmark" |
                    factor== "Negative Egotropic Benchmark" 
                   , 1, 0),
   egotropic =ifelse(factor== "Egotropic" |
                     factor== "Positive Egotropic Benchmark" |
                     factor== "Two-way Benchmark Egotropic" |
                     factor== "Negative Egotropic Benchmark" 
                   , 1, 0),
   sociotropic =ifelse(factor== "Sociotropic" |
                     factor== "Positive Sociotropic Benchmark" |
                     factor== "Two-way Benchmark Sociotropic" |
                     factor== "Negative Sociotropic Benchmark" 
                   , 1, 0)
) %>%  left_join(firstwave, 
              by = c("lfdn")) 

```

## Randomization check

```{r }
df %>% ggplot(aes(vignette1)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(vignette2)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(vignette3)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(vignette4)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(vignette5)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(vignette6)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))
df %>% ggplot(aes(treatment_video)) + geom_histogram(stat="count") #+ facet_grid(~ as.Date(date))

#data %>% ggplot(aes(Z_1_1)) + geom_histogram(stat=count))+ facet_grid(~ as.Date(date))

```


```{r, results = "asis"}
# conjoint prepare
label <- read_dta(vignettepath) %>%  
    mutate(vignr = as.numeric(vignr))
str(label$vignr)

# Contest 1  policy 1
conjoint1_1 <-
  df %>% 
  select(lfdn, vignette1,conjoint_choice1,conjoint_rating1,treatment_video) %>%
  dplyr::rename(vignr = vignette1, outcome = conjoint_choice1,
                rating = conjoint_rating1, ID = lfdn) %>%
  mutate(vignr = as.numeric(vignr))%>%
  left_join( label, by = c("vignr"))%>%
  mutate(contest = 1,
         candidate=1,
         outcome=dplyr::recode(outcome, "1" = "1", "2" = "0")) 
          
# Contest 1  policy 2
conjoint1_2 <-
  df %>% 
  select(lfdn, vignette2,conjoint_choice1,conjoint_rating2,treatment_video) %>%
  dplyr::rename(vignr = vignette2,
                outcome = conjoint_choice1,
                rating = conjoint_rating2,
                ID = lfdn) %>%
  mutate(vignr = as.numeric(vignr)) %>%
  left_join( label, by = c("vignr"))%>%
  mutate(contest = 1,
         candidate=2,
         outcome=dplyr::recode(outcome, "1" = "0", "2" = "1")) 

# Contest 2  policy 1
conjoint2_1<-df %>% select(lfdn, vignette3,conjoint_choice2,conjoint_rating3,treatment_video) %>% 
              dplyr::rename(vignr = vignette3,
                     outcome = conjoint_choice2,
                     rating = conjoint_rating3,
                     ID = lfdn) %>%  
              mutate(vignr = as.numeric(vignr))%>% 
              left_join( label, 
              by = c("vignr"))%>% 
              mutate(
              contest = 2,
              candidate=1)%>% 
              mutate(outcome=dplyr::recode(outcome, 
                         "1" = "1",
                         "2" = "0")) 
# Contest 2  policy 2
conjoint2_2<-df %>% select(lfdn, vignette4,conjoint_choice2,conjoint_rating4,treatment_video) %>% 
              dplyr::rename(vignr = vignette4,
                     outcome = conjoint_choice2,
                     rating = conjoint_rating4,
                     ID = lfdn) %>%  
              mutate(vignr = as.numeric(vignr))%>% 
              left_join( label, 
              by = c("vignr"))%>% 
              mutate(
              contest = 2,
              candidate=2)%>% 
              mutate(outcome=dplyr::recode(outcome, 
                         "1" = "0",
                         "2" = "1")) 


# Contest 3  policy 1
conjoint3_1<-df %>% select(lfdn, vignette5,conjoint_choice3,conjoint_rating5,treatment_video) %>% 
              dplyr::rename(vignr = vignette5,
                     outcome = conjoint_choice3,
                     rating = conjoint_rating5,
                     ID = lfdn) %>%  
              mutate(vignr = as.numeric(vignr))%>% 
              left_join( label, 
              by = c("vignr"))%>% 
              mutate(
              contest = 3,
              candidate=1)%>% 
              mutate(outcome=dplyr::recode(outcome, 
                         "1" = "1",
                         "2" = "0")) 

conjoint3_2<-df %>% select(lfdn, vignette6,conjoint_choice3,conjoint_rating6,treatment_video) %>% 
              dplyr::rename(vignr = vignette6,
                     outcome = conjoint_choice3,
                     rating = conjoint_rating6,
                     ID = lfdn) %>%  
              mutate(vignr = as.numeric(vignr))%>% 
              left_join( label, 
              by = c("vignr"))%>% 
              mutate(
              contest = 3,
              candidate=2)%>% 
              mutate(outcome=dplyr::recode(outcome, 
                         "1" = "0",
                         "2" = "1")) 

# rbind 
conjoint <- do.call("rbind", list(conjoint1_1, conjoint1_2,
                               conjoint2_1, conjoint2_2,
                               conjoint3_1, conjoint3_2))%>%
                    mutate(vig_doses=dplyr::recode(vig_doses, 
                         "0" = "1 Million doses",
                         "1" = "5 Million doses",
                         "2" = "10 Million doses",
                         "3" = "20 Million doses"))%>% 
                   mutate(vig_dose_share=dplyr::recode(vig_dose_share, 
                         "0" = "1 % of the vaccines",
                         "1" = "5 % of the vaccines",
                         "2" = "10 % of the vaccines",
                         "3" = "20 % of the vaccines"))%>% 
                   mutate(vig_countries=dplyr::recode(vig_countries, 
                         "0" = "20 Staaten",
                         "1" = "80 countries",
                         "2" = "160 countries"))%>% 
                   mutate(vig_benefit_economic=dplyr::recode(vig_benefit_economic, 
                         "0" = "Without economic importance",
                         "1" = "With economic importance"))%>% 
                   mutate(vig_benefit_health=dplyr::recode(vig_benefit_health, 
                         "0" = "No risk of infection",
                         "1" = "Risk of infection"))%>% 
                  mutate(
                        treatment_video = factor(treatment_video),
                        vig_doses = factor(vig_doses),
                        vig_dose_share = factor(vig_dose_share),
                        vig_countries = factor(vig_countries),
                        vig_benefit_economic = factor(vig_benefit_economic),
                        vig_benefit_health = factor(vig_benefit_health))%>% 
                 mutate(
                        outcome = as.numeric(outcome))%>% 
                 mutate(
                        rating = as.numeric(rating))


```

# Summary statistics

```{r}
# covariate_names[!(covariate_names %in% names(df))]
covariate_names<-c(covariate_names_1,covariate_names_2)
small_df <- 
  df %>% dplyr::select(all_of(covariate_names))%>% 
  # select_if(is.numeric) %>% 
  drop_na()

```

```{r summary_stats, results="asis", message=FALSE, echo=TRUE}
# Make a data.frame containing summary statistics of interest

summ_stats <-
  small_df %>% 
  fBasics::basicStats() %>%
  t() %>%
  as.data.frame() %>%
  dplyr::select("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum") %>% 
  rename('Lower quartile'= '1. Quartile', 'Upper quartile' ='3. Quartile') 

# Add in labels
summ_stats <- summ_stats %>% 
  mutate(Variable = factor(rownames(summ_stats), var_list$new_name, var_list$label)) %>% relocate(Variable)

```

```{r summary_stats_table, results="asis", message=FALSE, echo=FALSE}
# Pretty-printing in HTML
summ_stats_table <- kable(summ_stats, "html", digits = 2, booktabs = TRUE, row.names = FALSE)
kable_styling(summ_stats_table,
              bootstrap_options=c("striped", "hover", "condensed", "responsive"),
              full_width=FALSE)


tab_1 <- kable(summ_stats, format = "latex", digits = 2, caption = "Summary statistics", booktabs = T, linesep = "", label = "SummStats", row.names = FALSE) %>%
  kable_styling(latex_options="scale_down")

fileConn<-file(tab_1_path)
writeLines(tab_1, fileConn)
close(fileConn)

```


Pairwise correlations.

```{r cor plot, echo=FALSE, fig.width=10, fig.height=10, warning=FALSE}

pairwise_pvalues <- psych::corr.test(small_df, small_df)$p

  small_df  %>%  
  cor %>%
  corrplot::corrplot(type="upper",
         tl.col="black",
         order="original",
         tl.cex=1,
         addgrid.col = "black",
         p.mat=pairwise_pvalues,
         sig.level=0.05,
         number.font=10,
         insig="blank")

pdf(corr_matrix_plot_path, height = 10, width = 10)

  small_df %>%     
  cor %>%
  corrplot::corrplot(type="upper",
         tl.col="black",
         order="original",
         tl.cex=1,
         addgrid.col = "black",
         p.mat=pairwise_pvalues,
         sig.level=0.05,
         number.font=10,
         insig="blank")
dev.off()
```

# Results Solidarity

```{r, results = "asis"}
#r, child = "2_main_results.Rmd", eval = TRUE}
# put in separate files later
stargazer::stargazer(
  lm(solidarity_bahaviour ~ treatment_video, data = df), 
  lm(solidarity_attitude ~ treatment_video, data = df), 
  header = FALSE, type = "html")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(treatments, collapse =  "+"))), data = df))
names(models_basic) <- outcomes


figure_1 <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, outcome)) + geom_point() +
  #facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=20),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure_1

```

## Heterogenous Treatment Effects: Solidarity

Drawing on approaches in:

**Reference:** [Athey, Tibshrani and Wager (Annals of Statistics, 2019)](https://projecteuclid.org/download/pdfview_1/euclid.aos/1547197251)
, [Nie and Wager,  2017](https://arxiv.org/abs/1712.04912)

### Helpers

A function to prep het effects data for a given treatment, removing others.


```{r}
treatments <- treatment_levels <- c("treatment_video")
treatment_levels_diff <- c("treatment_video")
treatment_labels <- c("Treatment")

# subset to all hesitant (all who said no, or undecided)
# df <- subset(df, `vaccination intent`==2 | `vaccination intent` ==3,)

num_tiles <- 4  # ntiles = CATE is above / below the median

# Note this is set up so that we can swap in the difference outcome easily
het_df <- function(treatment_name = "treatment_levels_diff", 
                   outcome_name = "solidarity_bahaviour",
                   data = df) {
  data$W = data[treatment_name][[1]]
  data$Y = data[outcome_name][[1]]
  data %>% 
    dplyr::select(Y, W, ID, all_of(covariate_names)) %>%
    drop_na() %>%
    mutate_if(is.factor, as.numeric)
}

```



```{r heterogeneous}
# heterogeneous treatment effects 

#### Function to fit the forest and save outputs: input dataframe should have a privileged Y and W

f_cf <- function(df, n_trees = 500) {
  
  # rule of thumb: num.trees = number of individuals
  
  df_train <- sample_frac(df, replace=FALSE, size=train_fraction)
  df_test  <- anti_join(df, df_train, by = "ID") #need to check on larger 
  X <- as.matrix(df_train[, covariate_names])
  
  cf <-
    causal_forest(
    X = X,
    Y = df_train$Y,
    W = df_train$W,
    num.trees=n_trees) 

  #### Predict point estimates and standard errors (training set, out-of-bag)
  oob_pred      <- predict(cf, estimate.variance=TRUE)
  oob_tauhat_cf <- oob_pred$predictions
  oob_tauhat_cf_se <- sqrt(oob_pred$variance.estimates)
  
  #### Predict point estimates and standard errors (test set)
  # test_pred <- predict(cf, newdata=as.matrix(df_test[covariate_names]), estimate.variance=TRUE)
  # tauhat_cf_test <- test_pred$predictions
  # tauhat_cf_test_se <- sqrt(test_pred$variance.estimates)
  
  var_imp        <- c(variable_importance(cf)) 
  names(var_imp) <- covariate_names
  var_imp <- var_imp %>% sort(decreasing=TRUE)
  
  df_train$cate  <- oob_tauhat_cf
  df_train$ntile <- factor(ntile(oob_tauhat_cf, n=num_tiles))

# Standard model estimates by quantile
estimated_sample_ate <- 
  lm_robust(Y ~ ntile + ntile:W, data=df_train) %>% 
  tidy() %>% 
  dplyr::filter(stringr::str_detect(term, ":W"))

# AIPW estimates by quantile
estimated_aipw_ate <- 
  lapply(
  seq(num_tiles), function(w) 
    average_treatment_effect(cf, subset = df_train$ntile == w)
  ) %>% bind_rows

combined_estimates <- 
  bind_rows(
    estimated_sample_ate %>% mutate(type = "lm_robust") %>% select(-outcome, -df, -statistic, - p.value),
    estimated_aipw_ate %>% rename(std.error = std.err) %>% 
      mutate(
        type  = "aipw",
        term = estimated_sample_ate$term,
        conf.low = estimate - 1.96*std.error,
        conf.high = estimate + 1.96*std.error)
  )
# Outputs
list(cf = cf,
     df_train = df_train, 
     df_test = df_test, 
     X = X,
     oob_tauhat_cf = oob_tauhat_cf, 
     var_imp = var_imp, 
     ntile_estimates = combined_estimates)
}
```




Function to generate fitted values:

```{r}
fitted_vals <- function(var_of_interest, model = test){
  
  df_train <- model$df_train
  cf <- model$cf
  
      is_continuous <- (length(unique(df_train[var_of_interest][[1]])) > 5) # crude rule for determining continuity
    if(is_continuous) {
      x_grid <- quantile(df_train[var_of_interest][[1]], probs = seq(0, 1, length.out = 5))
    } else {
      x_grid <- sort(unique(df_train[var_of_interest][[1]]))
    }
    
  df_grid <-  setNames(data.frame(x_grid), var_of_interest)
  
  other_covariates <- covariate_names[!covariate_names %in% var_of_interest]
  df_median <- df_train %>% dplyr::select(all_of(other_covariates)) %>% summarise_all(median) 
  df_eval <- crossing(df_median, df_grid)
  
  pred <- predict(cf, newdata=df_eval[,covariate_names], estimate.variance=TRUE)
df_eval$tauhat <- pred$predictions
df_eval$se <- sqrt(pred$variance.estimates)

# Change to factor so the plotted values are evenly spaced (e.g. logicals)
df_eval %>% arrange(var_of_interest) %>%
  mutate(var_of_interest = as.factor(as.numeric(df_eval[var_of_interest][[1]])))
}

```


## Run forests for all treatments

```{r}

# Change n_trees below
cf_all <- 
  lapply(treatment_levels_diff, function(x) het_df(x, outcome_name = "solidarity_bahaviour",) %>% f_cf(n_trees=500))
names(cf_all) <- treatment_levels_diff


```

```{r}
lapply(cf_all, function(j) names(j$var_imp[1:6])) %>% bind_rows(.id = "treatment") %>% kable(caption = "Strongest predictions", booktabs = TRUE)


what_matters <- 
  list(All = cf_all) %>%
  lapply(function(res) 
    lapply(res, function(j) j$var_imp %>% t %>% data.frame) %>%
      bind_rows %>% mutate(treatment = names(cf_all)) %>%
      gather(covariate, "value", - treatment)) %>% bind_rows(.id = "group")
  
what_matters_plot <- 
what_matters  %>% 
mutate(
  covariate = factor(covariate,   rev(var_list$new_name), rev(var_list$label)),
  treatment = factor(treatment)) %>% 
  ggplot(aes(value, covariate, color = treatment)) + 
  geom_point()+
  scale_x_continuous(name="Variable Importance")+
  theme_bw() + facet_wrap(~group) + ylab(" ")+
    geom_vline(xintercept=0.075, linetype="longdash", lwd=0.35, size=0.75, colour = "#B55555")

what_matters_plot

pdf(fig_3_path, width = 9, height = 9)
  what_matters_plot
dev.off()

```

## Combined graph of heterogeneous effects

```{r}

vars <- c("age2", "positve.reciprocity", "negative.reciprocity", "altruism", "migration.support","identity.germany","solidarity","prior.responsability.mayor","identity.germany")

all_marginals <- 
  lapply(vars, function(x) 
         lapply(cf_all , function(model)
           fitted_vals(x, model = model) %>%
             mutate(var = x)
           ) %>% bind_rows(.id = "treatment")) %>%
  bind_rows %>%
  mutate(var = factor(var, vars, c("age2", "positve.reciprocity", "negative.reciprocity", "altruism", "migration.support","identity.germany","solidarity","prior.responsability.mayor","identity.germany")),
         treatment = 
           factor(treatment,treatment_levels_diff, treatment_labels),
var_of_interest = 
  factor(as.numeric(paste(var_of_interest)),
sort(unique(as.numeric(paste(var_of_interest))))))

figure_4 <-
  
all_marginals %>%
  mutate(ymin_val = tauhat-1.96*se) %>%
  mutate(ymax_val = tauhat+1.96*se) %>%
  ggplot()  + 
  geom_line(aes_string(x="var_of_interest", y="tauhat", group = 1), color="red") +
  geom_errorbar(aes_string(x="var_of_interest",ymin="ymin_val", ymax="ymax_val", width=.2),color="blue") +
  geom_hline(yintercept=0, linetype="longdash", lwd=0.35, colour = "#B55555") +
  ylab("Predicted Treatment Effect") +
  theme_bw() +
  theme(axis.ticks = element_blank()) +
  facet_grid(treatment ~ var, scales = "free_x") +
  xlab("quantiles")

figure_4

pdf(fig_4_path, width = 8, height = 6) 
figure_4
dev.off()

```

## Best linear projections

Using causal forests functions:

```{r}
blps <-
lapply(
  list(all = cf_all), 
  function(set) lapply(set,  function(model)
       lapply(1:length(covariate_names), function(i)
           best_linear_projection(model$cf, model$X[,i]) %>% 
             tidy  %>% 
         dplyr::filter(term!="(Intercept)") %>% 
         mutate(var = covariate_names[i])) %>%
        bind_rows()) %>% 
    bind_rows(.id = "treatment")) %>% bind_rows(.id = "set") %>%
  mutate(treatment = factor(treatment)) 


# importance
top <- 3
most_common <- c(lapply(cf_all, function(j) names(j$var_imp[1:top])) %>% bind_rows(.id = "treatment") %>% unlist()) %>% unique()

# add in promised measures from PAP

most_common <- unique(c(most_common, "age2", "positve.reciprocity", "negative.reciprocity", "altruism", "migration.support","identity.germany","solidarity","prior.responsability.mayor","identity.germany"))
blps_plot <- 
  blps %>% dplyr::filter(var %in% most_common) %>%
  mutate(var = factor(var,   rev(var_list$new_name), rev(var_list$label))) %>%
    ggplot(aes(estimate, var, color = set)) + 
    geom_point(position=position_dodge(width = .5)) +
    geom_errorbar(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), width = .25,  position=position_dodge(width = .5)) +
  facet_grid(~treatment) +
  geom_vline(xintercept = 0, color = "red") +
  theme_bw()  +
  ylab("")



blps_plot

#pdf(blps_plot_path, height = 6, width = 9)
#blps_plot
#dev.off()
```


```{r}
lapply(cf_all, function(j) names(j$var_imp[1:6])) %>% bind_rows(.id = "treatment") %>% kable(caption = "Strongest predictions", booktabs = TRUE)


what_matters <- 
  list(All = cf_all) %>%
  lapply(function(res) 
    lapply(res, function(j) j$var_imp %>% t %>% data.frame) %>%
      bind_rows %>% mutate(treatment = names(cf_all)) %>%
      gather(covariate, "value", - treatment)) %>% bind_rows(.id = "group")
  
what_matters_plot <- 
what_matters  %>% 
mutate(
  covariate = factor(covariate,   rev(var_list$new_name), rev(var_list$label)),
  treatment = factor(treatment)) %>% 
  ggplot(aes(value, covariate, color = treatment)) + 
  geom_point()+
  scale_x_continuous(name="Variable Importance")+
  theme_bw() + facet_wrap(~group) + ylab(" ")+
    geom_vline(xintercept=0.075, linetype="longdash", lwd=0.35, size=0.75, colour = "#B55555")

what_matters_plot

pdf(fig_3_path, width = 9, height = 9)
  what_matters_plot
dev.off()

```


## Best linear projections

Using causal forests functions:

```{r}
blps <-
lapply(
  list(all = cf_all), 
  function(set) lapply(set,  function(model)
       lapply(1:length(covariate_names), function(i)
           best_linear_projection(model$cf, model$X[,i]) %>% 
             tidy  %>% 
         dplyr::filter(term!="(Intercept)") %>% 
         mutate(var = covariate_names[i])) %>%
        bind_rows()) %>% 
    bind_rows(.id = "treatment")) %>% bind_rows(.id = "set") %>%
  mutate(treatment = factor(treatment)) 


# importance
top <- 3
most_common <- c(lapply(cf_all, function(j) names(j$var_imp[1:top])) %>% bind_rows(.id = "treatment") %>% unlist()) %>% unique()

# add in promised measures from PAP

most_common <- unique(c(most_common, "solidarity", "age2", "trust", "risk", "eduyears"))
blps_plot <- 
  blps %>% dplyr::filter(var %in% most_common) %>%
  mutate(var = factor(var,   rev(var_list$new_name), rev(var_list$label))) %>%
    ggplot(aes(estimate, var, color = set)) + 
    geom_point(position=position_dodge(width = .5)) +
    geom_errorbar(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), width = .25,  position=position_dodge(width = .5)) +
  facet_grid(~treatment) +
  geom_vline(xintercept = 0, color = "red") +
  theme_bw()  +
  ylab("")



blps_plot

#pdf(blps_plot_path, height = 6, width = 9)
#blps_plot
#dev.off()
```


## Outcome 2: Attitudes



## Results Conjoint: Choice

```{r, results = "asis"}
# analysis

models_basic <-
  lm_robust(outcome ~ vig_doses+vig_dose_share+vig_countries+vig_benefit_economic+vig_benefit_health,
            data = conjoint, clusters = ID,se_type = "stata")

# estimation
amces <- cj(conjoint, outcome ~vig_doses+vig_dose_share+vig_countries+vig_benefit_economic+vig_benefit_health,
            id =~ID)
plot(amces)

amces_2 <- cj(conjoint,  outcome ~vig_doses+vig_dose_share+vig_countries+vig_benefit_economic+vig_benefit_health
              , id = ~ID, estimate = "amce", by = ~treatment_video)
plot(amces_2) + ggplot2::facet_wrap(~BY, ncol = 3L)

plot(amces_2, group = "treatment_video", vline = 0.5)

```

## Results Conjoint: Rating

```{r, results = "asis"}

amces_rating <- cj(conjoint, rating ~vig_doses+vig_dose_share+vig_countries+vig_benefit_economic+vig_benefit_health,
            id =~ID)
plot(amces_rating)

amces_3 <- cj(conjoint,  rating ~vig_doses+vig_dose_share+vig_countries+vig_benefit_economic+vig_benefit_health
              , id = ~ID, estimate = "amce", by = ~treatment_video)
plot(amces_3) + ggplot2::facet_wrap(~BY, ncol = 3L)


```




# Performance Voting 

## Manipulation Check
```{r, results = "asis"}
stargazer::stargazer(
  lm(mc.performance.germany ~ factor(factor), data = df), 
  lm(mc.performance.uk ~ factor(factor), data = df), 
  lm(mc.performance.au ~ factor(factor), data = df), 
  header = FALSE, type = "html")


outcomes <- c("mc.performance.germany", "mc.performance.uk", "mc.performance.au")
outcome_labels <- c("Performance Germany", "Performance UK","Performance Australia")
treatments <- c("factor")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(factor(treatments), collapse =  "+"))), data = df))
names(models_basic) <- outcomes

figure <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, term)) + geom_point() +
  facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=15),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure

outcomes <- c("mc.performance.germany", "mc.performance.uk", "mc.performance.au")
outcome_labels <- c("Performance Germany", "Performance UK","Performance Australia")
treatments <- c("egotropic","sociotropic","negative","positive","sociotropic")
treatment_labels <- c("Egotropic","Sociotropic","Negative","Positive")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(factor(treatments), collapse =  "+"))), data = df))
names(models_basic) <- outcomes

figure <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, term)) + geom_point() +
  facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=15),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure


```

## Main Results

```{r, results = "asis"}
stargazer::stargazer(
  lm(incumbent_voting ~ factor(factor), data = df), 
  lm(letter ~ factor(factor), data = df), 
  lm(sign_letter ~ factor(factor), data = df), 
  header = FALSE, type = "html")



H2<-lh_robust(incumbent_voting ~ egotropic + sociotropic+ negative +positive , data = df, linear_hypothesis = "positive + negative = 0")

knitr::kable(tidy(H2$lh))

stargazer::stargazer(
  lm(incumbent_voting ~ egotropic+sociotropic+negative+positive+sociotropic*positive +sociotropic*positive, data = df), 
  lm(letter ~ egotropic+sociotropic+negative+positive+sociotropic*positive+sociotropic*negative, data = df), 
  lm(post.performance ~ egotropic+sociotropic+negative+positive+sociotropic*positive+sociotropic*negative, data = df), 
  header = FALSE, type = "html")

outcomes <- c("incumbent_voting", "letter", "post.performance")
outcome_labels <- c("Incumbent Voting", "Letter","Posterior Beliefs")
treatments <- c("egotropic","sociotropic","negative","positive","sociotropic")
treatment_labels <- c("Egotropic","Sociotropic","Negative","positive")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(treatments, collapse =  "+"))), data = df))
names(models_basic) <- outcomes


figure_6 <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, term)) + geom_point() +
  facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=15),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure_6


```

## Mechanism
```{r, results = "asis"}
stargazer::stargazer(
  lm(satisvaction.CDU ~ factor(factor), data = df), 
  lm(satisvaction.CSU ~ factor(factor), data = df), 
  lm(satisvaction.SPD ~ factor(factor), data = df), 
  lm(satisvaction.Merkel ~ factor(factor), data = df), 
  lm(satisvaction.Spahn ~ factor(factor), data = df), 
  lm(satisvaction.PM ~ factor(factor), data = df), 
  lm(satisvaction.vdLeyen ~ factor(factor), data = df), 
  lm(satisvaction.mayor ~ factor(factor), data = df), 
  header = FALSE, type = "html")


outcomes <- c("satisvaction.CDU", "satisvaction.CSU", "satisvaction.SPD","satisvaction.Merkel","satisvaction.Spahn","satisvaction.PM","satisvaction.vdLeyen","satisvaction.mayor")
outcome_labels <- c("Satisvaction CDU", "Satisvaction CSU","Satisvaction SPD","Satisvaction Merkel","Satisvaction Spahn","Satisvaction Minister President","Satisvaction von der Leyen","Satisvaction Mayor")
treatments <- c("factor")
treatment_labels <- c("Egotropic","Sociotropic","Negative","Positive")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(factor(treatments), collapse =  "+"))), data = df))
names(models_basic) <- outcomes

figure_7 <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, term)) + geom_point() +
  facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=15),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure_7


outcomes <- c("satisvaction.CDU", "satisvaction.CSU", "satisvaction.SPD","satisvaction.Merkel","satisvaction.Spahn","satisvaction.PM","satisvaction.vdLeyen","satisvaction.mayor")
outcome_labels <- c("Satisvaction CDU", "Satisvaction CSU","Satisvaction SPD","Satisvaction Merkel","Satisvaction Spahn","Satisvaction Minister President","Satisvaction von der Leyen","Satisvaction Mayor")
treatments <- c("egotropic","sociotropic","negative","positive","sociotropic")
treatment_labels <- c("Egotropic","Sociotropic","Negative","positive")

models_basic <- lapply(c(outcomes), function(y)
lm_robust(as.formula(paste(y, "~",   paste(factor(treatments), collapse =  "+"))), data = df))
names(models_basic) <- outcomes

figure_8 <- lapply(models_basic, tidy) %>% bind_rows(.id = "outcome") %>%
  dplyr::filter(term != "(Intercept)") %>%
  mutate(outcome = factor(outcome, outcomes, outcome_labels)) %>% 
  ggplot(aes(estimate, term)) + geom_point() +
  facet_grid(~outcome) +
  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), position = position_dodge(width = 0.3), width = .1)+
  theme_bw()+
  #ylab("Change in support for regime (0-1)") +
    geom_vline(xintercept=0, linetype="longdash", lwd=0.35, size=0.75,alpha=0.3, colour = "#B55555")  +
    xlab("") + ylab("")  +
    theme(#panel.grid.major = element_blank(),
          #panel.grid.minor = element_blank(),
          #panel.background = element_blank(),
          #strip.background = element_blank(),
          # strip.text.y = element_blank(),
          #axis.text.y=element_blank(),
          legend.position = "top",
          text = element_text(size=15),
          legend.title=element_blank(),
          strip.text.y = element_text(angle = 180),
          axis.ticks.y=element_blank()) +
    scale_color_grey()


figure_8


```

# Vaccination Priority

```{r, results = "asis"}
df %>% 
  select(v_340,v_342)%>% 
  dplyr::rename(
  PersonA  = v_340,
  PersonB  = v_342,
  )%>% 
  gather(key=Type, value=Value)%>%
  ggplot( aes(x=Value, fill=Type)) +
    geom_density( color="#e9ecef", alpha=0.6) +
    scale_fill_manual(values=c("#69b3a2", "#404080")) +
    xlab("Vaccination Priority German Government") + ylab("")  +
    theme_bw()+
    labs(fill="Person")

df %>% 
  select(v_344,v_346)%>% 
  dplyr::rename(
  PersonA  = v_344,
  PersonB  = v_346,
  )%>% 
  gather(key=Type, value=Value)%>%
  ggplot( aes(x=Value, fill=Type)) +
    geom_density( color="#e9ecef", alpha=0.6) +
    scale_fill_manual(values=c("#69b3a2", "#404080")) +
    xlab("Vaccination Priority WHO") + ylab("")  +
    theme_bw()+
    labs(fill="")


## Prioritization analysis
df <- df %>% mutate( 
    priority_de_indian = (v_340-1)/6,
    priority_de_german = (v_342-1)/6,
    priority_who_indian = (v_344-1)/6,
    priority_who_german = (v_346-1)/6,
    
    de_de_preference  = priority_de_german - priority_de_indian, # DE Preference for German 25
    who_de_preference  = priority_who_german - priority_who_indian # WHO Preference for German 25
)

df %>% 
  summarize(
    priority_de_indian = mean(priority_de_indian),
    priority_de_german = mean(priority_de_german),
    priority_who_indian = mean(priority_who_indian),
    priority_who_german = mean(priority_who_german),
    de = mean(de_de_preference, na.rm = TRUE),
    de_priority = mean(de_de_preference>0, na.rm = TRUE),
    who = mean(who_de_preference, na.rm = TRUE),
    who_priority = mean(who_de_preference>0, na.rm = TRUE)
    ) %>% t

# about 38% of Germans think that a German 25 year old should be higher priority than an Indian 65 year old
#  22% think the same for WHO priortization 

```




# References

<div id="refs"></div>

